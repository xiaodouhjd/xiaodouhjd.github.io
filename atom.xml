<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小豆的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-01T08:22:57.957Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jindou Hou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hello</title>
    <link href="http://yoursite.com/2019/06/01/hello/"/>
    <id>http://yoursite.com/2019/06/01/hello/</id>
    <published>2019-06-01T08:22:18.000Z</published>
    <updated>2019-06-01T08:22:57.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的天"><a href="#我的天" class="headerlink" title="我的天"></a>我的天</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;我的天&quot;&gt;&lt;a href=&quot;#我的天&quot; class=&quot;headerlink&quot; title=&quot;我的天&quot;&gt;&lt;/a&gt;我的天&lt;/h1&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript运行机制</title>
    <link href="http://yoursite.com/2019/05/16/JavaScript%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/05/16/JavaScript运行机制/</id>
    <published>2019-05-16T01:18:47.000Z</published>
    <updated>2019-06-01T08:16:11.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你真懂JavaScript运行机制吗1？"><a href="#你真懂JavaScript运行机制吗1？" class="headerlink" title="你真懂JavaScript运行机制吗1？"></a>你真懂JavaScript运行机制吗1？</h1><p>说起javascript（以下简称js）这门语言，相信大家已经非常熟悉了，不管是前端开发还是后端开发几乎无时无刻都<br>要跟它打交道。虽说开发者每天几乎都要操作js，但是你真的确定你掌握了js的运行机制吗！下面我们就来聊聊这<br>话题。</p><h1 id="JavaScript运行机制图解"><a href="#JavaScript运行机制图解" class="headerlink" title="JavaScript运行机制图解"></a>JavaScript运行机制图解</h1><p><img src="/2019/05/16/JavaScript运行机制/图解.png" alt="图解"><br>上图我们可以分为两部分：浏览器中的 JS引擎 和 运行环境Runtime ，那它们的区别是什么？</p><ul><li>JS引擎：编译并执行代码的地方。<br>如上图中可以看出JS引擎分为两大核心部分： 栈和堆<br>栈（Stack）:js代码的执行都要压到此栈中执行。<br>堆：存放对象、数组的地方，js垃圾回收就是检查这里。</li><li>Runtime：浏览器的运行环境，它提供了一些对外接口供JS调用，以及跟外界打交道。</li></ul><h1 id="JavaScript引擎是单线程"><a href="#JavaScript引擎是单线程" class="headerlink" title="JavaScript引擎是单线程"></a>JavaScript引擎是单线程</h1><p>JS引擎是单线程的，也就是说在一个时间段内，事情只能一件一件的按先后顺序去做，第一件事没做完就不能第二<br>件事。那么在js引擎中负责解释和执行js代码的线程只有一个，我们可以称之为 主线程 。<br>当然浏览器的运行环境Runtime还提供一些其他的线程，如定时器线程、ajax线程、事件线程、网络请求和UI渲染<br>的线程，为了和js主线程分开，我们这里都统称它们为 工作线程 。<br>由于浏览器是多线程的，所以工作线程和js主线程都可以执行任务，线程间互不干扰。</p><h1 id="JavaScript引擎是单线程-1"><a href="#JavaScript引擎是单线程-1" class="headerlink" title="JavaScript引擎是单线程"></a>JavaScript引擎是单线程</h1><p>JS引擎是单线程的，也就是说在一个时间段内，事情只能一件一件的按先后顺序去做，第一件事没做完就不能第二<br>件事。那么在js引擎中负责解释和执行js代码的线程只有一个，我们可以称之为 主线程 。<br>当然浏览器的运行环境Runtime还提供一些其他的线程，如定时器线程、ajax线程、事件线程、网络请求和UI渲染<br>的线程，为了和js主线程分开，我们这里都统称它们为 工作线程 。<br>由于浏览器是多线程的，所以工作线程和js主线程都可以执行任务，线程间互不干扰。</p><h1 id="JavaScript同步（异步）任务"><a href="#JavaScript同步（异步）任务" class="headerlink" title="JavaScript同步（异步）任务"></a>JavaScript同步（异步）任务</h1><p>在JavaScript任务可以分为两种：</p><ul><li>同步任务：在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务，若前一个任务耗<br>费很长时间，则后面的任务会一直处于等待状态，即阻塞状态。</li><li>异步任务：在栈执行代码的过程中，如遇到异步函数，如setTimeout、异步Ajax、事件处理程序，会将这些<br>异步代码交给浏览器的工作线程来处理，我们把这些任务称之为异步任务。异步任务是不进入主线程，而是<br>进入任务队列（queue task）。<ul><li>什么异步函数？<br>异步函数通常是由发起函数和回调函数构成的。如：<br>A（callback）<ul><li>函数A就是发起函数</li><li>callback就是回调函数<br>它们都是在主线程调用的，其中发起函数用来发起异步过程，回调函数用来处理结果。<br>如：<code>setTimeout(callback,1000)</code><br>setTimeout就是发起函数、callback就是回调函数。</li></ul></li></ul></li></ul><p>如： <code>异步的Ajax</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var xhr = new new XMLHttpRequest();</span><br><span class="line">xhr.onreadystatechange = callback; //callback为回调函数</span><br><span class="line">xhr.open(&apos;get&apos;,url,true);</span><br><span class="line">xhr.send(null); // send为发起函数</span><br></pre></td></tr></table></figure></p><p>可以看出发起函数和回调函数也可以是分离的。</p><p>既然同步任务是在主线程中执行的，那么异步任务何时执行？<br>答：是这样的，一旦栈中同步任务执行完毕后，系统就会通过 事件循环 机制读取任务队列中的任务一个个移<br>到栈中去执行。</p><h1 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h1><p>当主线程中的任务执行完毕后，会从任务队列中获取任务一个个的放在栈中执行去执行，这个过程是循环不断的，<br>所以整个的这种运行机制又称为事件循环。</p><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>在js中，代码最终都是在栈中执行的，栈结构的特点是：<strong>先进后出，后进先出</strong>。<br>我们来看下面代码的运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function bar()&#123;</span><br><span class="line">console.log(1);</span><br><span class="line">foo();</span><br><span class="line">&#125;</span><br><span class="line">function foo()&#123;</span><br><span class="line">par();</span><br><span class="line">console.log(3);</span><br><span class="line">&#125;</span><br><span class="line">function par()&#123;</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">console.log(2);</span><br><span class="line">&#125;,0);</span><br><span class="line">&#125;</span><br><span class="line">bar();</span><br></pre></td></tr></table></figure></p><p>运行的最终结果是：132。 为什么结果不是123呢？<br>下我们来分析下代码运行时入栈和出栈的过程。</p><p>首先当调用函数 bar() 时，此函数就会先入栈，其内部的 console.log(1) 也会随之入栈执行。<br><img src="/2019/05/16/JavaScript运行机制/1.png" alt="1"><br>执行完console.log(1)后，就要出栈，于是控制台先打印出结果1，只剩下bar()在栈中。接着再执行函数bar内部的<br>函数foo，于是函数foo也开心的入栈了。<br><img src="/2019/05/16/JavaScript运行机制/2.png" alt="2"><br>执行函数foo的内部代码，调用函数 par() ，于是函数par()也要跟着入栈。<br><img src="/2019/05/16/JavaScript运行机制/3.png" alt="3"><br>由于函数par()内部执行遇到了 异步函数setTimeout ,异步函数则会由浏览器的Runtime运行环境的工作线程来处<br>理，等定时器设置的时间到达就会被放到任务队列中，此时栈的同步任务继续执行。<br><img src="/2019/05/16/JavaScript运行机制/gz.png" alt="gz"><br>接着在执行par函数中的 console.log(3) ,控制台打印结果为3 ,此时栈的代码执行完毕后，会按照栈的特点进行<br><strong>先进后出，后进先出</strong>顺序进行 出栈 。出栈顺序：<strong>先函数par()—-》后函数foo()</strong>—-》<strong>最后函数bar</strong>.</p><p>最后只剩下异步任务，由主线程去获取任务队列中的任务放在栈中去执行。也可以认为栈中的同步代码执行总是在<br>读取 异步任务 之前执行。<br><img src="/2019/05/16/JavaScript运行机制/5.png" alt="5"><br>最后执行setTimeout中的回调函数：结果控制台输出为2。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function()&#123;</span><br><span class="line">console.log(2);</span><br><span class="line">&#125;,0);</span><br></pre></td></tr></table></figure></p><p>所以最终代码的运行结果为132。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>js引擎是单线程执行js代码，同步任务在栈中按顺序执行，如果某一个同步任务没有执行完毕，则后面的代码<br>将会处于阻塞等待状态</li><li>栈中若执行遇到了异步任务（如定时器、异步Ajax、事件），会将此异步任务通过浏览器对应的工作线程来<br>处理。</li><li>工作线程中的所有异步任务均会按照设定的时间进行等待，时间一到会被加入任务队列。如果是异步ajax,则<br>等待其返回结果在加入到任务队列</li><li>当栈中为空时，会通过事件循环来一个个获取任务队列中的任务放到栈中进行逐个运行。即栈中的同步任务<br>总是在读取 异步任务 之前执行</li><li>定时器设置的时间不一定按照设定的时间进行执行，这得取决于栈中同步任务耗费的时间。因为栈中执行的<br>同步任务如果耗费很长时间，则会影响到异步任务回调函数的执行。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;你真懂JavaScript运行机制吗1？&quot;&gt;&lt;a href=&quot;#你真懂JavaScript运行机制吗1？&quot; class=&quot;headerlink&quot; title=&quot;你真懂JavaScript运行机制吗1？&quot;&gt;&lt;/a&gt;你真懂JavaScript运行机制吗1？&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
</feed>
